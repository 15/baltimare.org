---
export const prerender = false;

import Navbar from "../components/Navbar.astro";
import { ViewTransitions } from "astro:transitions";
import { getImage } from "astro:assets";
const { title } = Astro.props;

const { pathname } = Astro.url;

const backgrounds = ["squarestones.png", "grass.png", "sidewalk.png"];

import bgImage1 from "../assets/textures/squarestones.png";
import bgImage2 from "../assets/textures/grass.png";
import bgImage3 from "../assets/textures/sidewalk.png";

import card1 from "../assets/Snapshot_008.png";
import card2 from "../assets/opg356.png";
import card3 from "../assets/opg246_Large.png";
import card4 from "../assets/opg296.png";
import card5 from "../assets/opg232.png";

const bgImages = [bgImage1, bgImage2, bgImage3].map(async (image) => {
  return (await getImage({
    src: image,
    format: "webp",
    width: 1080,
  })).src;
});

const bgs = await Promise.all(bgImages);
// const randomIndex = ~~(Math.random() * bgs.length);
const randomIndex = 0;
const selectedBg = bgs[randomIndex];

const card1Url = (await getImage({
  src: card1,
  format: "webp",
  width: 1080,
})).src;

const card2Url = (await getImage({
  src: card2,
  format: "webp",
  width: 1080,
})).src;

const card3Url = (await getImage({
  src: card3,
  format: "webp",
  width: 1080,
})).src;

const card4Url = (await getImage({
  src: card4,
  format: "webp",
  width: 1080,
})).src;

const card5Url = (await getImage({
  src: card5,
  format: "webp",
  width: 1080,
})).src;

const images = {
  "/": card1Url,
  "/about": card2Url,
  "/about/": card2Url,
  "/faq": card3Url,
  "/faq/": card3Url,
  "/credits": card4Url,
  "/credits/": card4Url,
  "/rules": card5Url,
  "/rules/": card5Url,
};
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <ViewTransitions />
    <link rel="preload" as="image" href="../assets/textures/squarestones.png"  fetchpriority="high"/>
    <link rel="preload" as="image" href="../assets/opg232.png"  fetchpriority="high"/>
    <link rel="preload" as="image" href="../assets/opg356.png" fetchpriority="high"/>
    <link rel="preload" as="image" href="../assets/opg296.png" fetchpriority="high" />
    <link rel="preload" as="image" href="../assets/opg246_Large.png" fetchpriority="high"/>
    <link rel="preload" as="image" href="../assets/mapcropped.png" fetchpriority="high"/>
    <link rel="preload" as="image" href="../assets/Snapshot_008.png" fetchpriority="high" />
    
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700"
      as="style"
    />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@300;400;500;600;700"
      as="style"
    />
    
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@300;400;500;600;700"
      rel="stylesheet"
    />
  </head>
  <body>
    <div
      class="overflow-hidden lg:p-auto px-2 w-full min-h-screen flex items-center justify-center bg-black bg-contain"
      style={`background-image: url('${selectedBg}')`}
    >
      <div
        style={`filter: drop-shadow(0 10px 10px #000); background-image: url('${images[pathname]}')`}
        class="bg-white rotate-0 lg:-rotate-1 flex flex-col items-center justify-center border-[6px] lg:border-[16px] border-amber-50 rounded-lg w-full h-full lg:w-320 lg:h-224 bg-cover"
      >
        <Navbar />
        <slot />
      </div>
    </div>
  </body><style is:global>
    .glass {
      background: rgba(255, 255, 255, 0.6);
      box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
      backdrop-filter: blur(4px);
      -webkit-backdrop-filter: blur(4px);
      border-radius: 10px;
      border: 1px solid rgba(255, 255, 255, 0.18);
    }

    .text-shadow {
      text-shadow: 1px 1px 1px black;
    }
    
	
	dialog {
		font-family: Poppins, Arial, sans-serif;
		@apply rounded-xl;
		filter: drop-shadow(0 50px 50px #000);
		outline: none;
	}
	
	dialog[open] {
		animation: fade 0.3s ease-in-out normal;
	}
	
	dialog::backdrop {
		background-image: linear-gradient(45deg, #000, #000);
		opacity: 0.5;
	}
	
	dialog:focus {
		outline: none;
	}
	
	@keyframes fade {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
  </style>
</html>
